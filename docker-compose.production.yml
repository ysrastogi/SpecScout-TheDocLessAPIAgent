services:
  api-agent:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: docless-api-agent
    ports:
      - "${PORT:-3000}:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - api-network

  nginx:
    image: nginx:alpine
    container_name: docless-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./demo-interface.html:/usr/share/nginx/html/index.html:ro
      - ./static:/usr/share/nginx/html/static:ro
    depends_on:
      - api-agent
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - api-network

  # Mock Lab Services (for testing)
  oauth2-service:
    build:
      context: ./mock-lab
      dockerfile: Dockerfile.oauth2
    container_name: docless-oauth2
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
    restart: unless-stopped
    networks:
      - api-network

  payment-service:
    build:
      context: ./mock-lab
      dockerfile: Dockerfile.payment
    container_name: docless-payment
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    restart: unless-stopped
    networks:
      - api-network

  webhook-service:
    build:
      context: ./mock-lab
      dockerfile: Dockerfile.webhook
    container_name: docless-webhook
    ports:
      - "3004:3004"
    restart: unless-stopped
    networks:
      - api-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: docless-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - api-network

  grafana:
    image: grafana/grafana:latest
    container_name: docless-grafana
    ports:
      - "3005:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    restart: unless-stopped
    networks:
      - api-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  api-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
